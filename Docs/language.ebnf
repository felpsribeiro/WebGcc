(* Language *)

program     = {instr} ;
instr       = include
            # | using
            | function ;

(* Libs *)
include     = '#include' , lib , 'using' , 'namespace' , 'std' , ';';
lib         = '<iostream>' ;

# (* Namespace definition *)
# using       = 'using' , namespace ;
# namespace   = 'namespace' , id;'
#             | id , '::' , id , ';' ;

(* Function *)
function    = type , id , '(' , [param] , ')' , '{' , {stmt} , '}' ;

param       = type , id , ['[' , ']'] , {tail} ;
tail        = ',' param ;

# -------------------------------------------
# parserStatement.cpp
# -------------------------------------------
stmt        = decl , ';'
	     | assign , ';'
            | call , ';'
            | 'cout' , '<<' , operator , {'<<' , operator} , ';'
            | 'return' , operator ,';'
            | newScope ;

decl        = type , id , position , [list]
            | type , id , [value] ;
list        = '=' , '{' , [operato , {',' , operator}] '}' ;
value       = '=' , operator ;

assign      = change_one , local
            | local , change_one
            | local , [oper] , '=' , operator ;
change_one  = '++' | '--' ;
oper        = '+' | '-'
            | '*' | '/'
            | '%' | '&'
            | '|' ;
            
newScope    = '{' , stmt , '}'
            | 'if' , '(' , operator , ')' , stmt , ['else' , stmt]
            | 'while' , '(' , operator')' , stmt
            | 'do' , stmt , 'while' , '(' , operator , ')' , ';'
            | 'for' , '(' , (decl | assign) , ';' , operator , ';' , assign , ')' , stmt ;
# ------------------------------------------

# -------------------------------------------
# parserExpression.cpp
# -------------------------------------------
operator    = join , {lor} ;
lor         = '||' , join ;

join        = equality , {land} ;
land        = '&&' , equality ;

equality    = rel , {eqdif} ;
eqdif       = ('==' | '!=') , rel ;

rel         = ari , {comp} ;
comp        = ('<' | '<=' | '>' | '>=') , ari ;

ari         = term , {oper} ;
oper        = ('+' | '-') , term ;

term        = unary , {calc} ;
calc        = ('*' | '/' | '%') , unary ;

unary       = '!' , unary
            | '-' , unary
            | factor ;

factor      = '(' , operator , ')'
            | call
            | local
            | integer
            | real
            | boolean ;

call        = id , '(' , {args} , ')' ;
args        = operator , {tailAr} ;
tailAr      = ',' operator ;

local       = id , {position} ;
position    = '[' , operator , ']' ;
# -----------------------------------------

(* Boolean *)
boolean     = 'true' | 'false' ;

(* Numbers *)
zero        = '0' ;
digit       = '0' | '1' | '2' | '3' | '4' 
            | '5' | '6' | '7' | '8' | '9' ;
integer     = zero
            | ['-'] , digit-zero , {digit} ;
real        = integer , '.' , {digit} ;

(* Texts *)
letter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
       | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
       | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'
       | 'V' | 'W' | 'X' | 'Y' | 'Z' 
       | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'
       | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
       | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'
       | 'v' | 'w' | 'x' | 'y' | 'z' ;
id     = letter , { letter | '_' | digit } ;
